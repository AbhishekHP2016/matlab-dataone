DataONE Toolbox for Matlab
==========================

Overview
--------
The *Matlab DataONE Toolbox* package collects information about Matlab script executions (aka
runs). The captured information includes the files that were read and written by the Matlab script,
and details of the execution environment, such as the operating system version, toolboxes loaded,
etc.

The recorded information for a script constitutes data provenance for the data products and
analysis outputs (graphs, .csv files, etc) generated by a script execution, by providing
information to describe how the data products were created.

Using the toolbox
----------------- 

Recording a script execution
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The *RunManager.record()* method takes a Matlab script as an argument and evals it, recording files
that were read and written by Matlab functions that are registered with *the Matlab DataONE
toobox*. It is not necessary to modify a Matlab script in order to use *record()*. You can also add a string to *tag* the run for reference.

The following example runs a sample script:

.. code:: matlab

  import org.dataone.client.run.RunManager;
  mgr = RunManager.getInstance();
  mgr.record('/Users/cjones/intertidal_temps/plot_temperatures.m', 'First run');

Information about the script execution is stored in the Matlab DataONE toolbox cache (~/.d1). The
toolbox provides methods to search, view, modify and publish items stored in the cache. It is not
recommended that files or directories be manually edited or deleted from the cache directories,
with the exception of the items mentioned in this document.
   
Listing script executions
~~~~~~~~~~~~~~~~~~~~~~~~~
Script runs that have been recorded can be listed using the *RunManager.listRuns()* method. The
listing can be filtered by the tag value specified when a run was recorded. Runs can also be
filtered by run start time, run end time, and by a sequence number, which is an integer value
assigned to each run to assist in easily specifying a particular run.

.. code:: matlab

  mgr.listRuns('tag', 'First run');
  

If no search parameters are specified to *listRuns()*, then all recorded runs are listed.

Viewing Script Executions
~~~~~~~~~~~~~~~~~~~~~~~~~
More detailed information can be retrieved and viewed for a run using the *RunManager.view()* function. To view a given run, pass in the runNumber or packageId from one of the resulting rows from the output of listRuns().  For instance:

.. code:: matlab
  
  mgr.view('runNumber', 1);

The output of the view() function provides more technical details about the run. You can also see the provenance details of the run by showing the 'used' and 'generated' sections as a cell array, like:

.. code:: matlab

  mgr.view('runNumber', 1, 'sections', {'details', 'used', 'generated'});


Deleting an execution
~~~~~~~~~~~~~~~~~~~~~
If a run wasn't useful, you can delete one or more runs from the database using the deleteRuns() function.

.. code:: matlab

  mgr.deleteRuns('runNumber', 1);
  mgr.listRuns();

Publishing an execution
~~~~~~~~~~~~~~~~~~~~~~~
The tooblox can package and publish data and metadata generated by a script execution to a registered DataONE repository.  For scientists to understand the data generated by the run, a certain amount of metadata needs to be provided.

Basic metadata are generated for each run.  The toolbox provides a template metadata file that will be populated with preset configuration properties.  As an example, by setting the following *RunManager.configuration* values, each metadata document for a run will contain these values:

.. code:: matlab
  
    mgr.configuration.science_metadata_config.title_prefix = 'PISCO: Intertidal temperature processing: ';
    mgr.configuration.science_metadata_config.title_suffix = '';
    mgr.configuration.science_metadata_config.primary_creator_salutation = 'Dr.';
    mgr.configuration.science_metadata_config.primary_creator_givenname = 'Carol';
    mgr.configuration.science_metadata_config.primary_creator_surname = 'Blanchette';
    mgr.configuration.science_metadata_config.primary_creator_address1 = 'Marine Science Institute';
    mgr.configuration.science_metadata_config.primary_creator_address2 = 'University of California Santa Barbara';
    mgr.configuration.science_metadata_config.primary_creator_city = 'Santa Barbara';
    mgr.configuration.science_metadata_config.primary_creator_state = 'CA';
    mgr.configuration.science_metadata_config.primary_creator_zipcode = '93101';
    mgr.configuration.science_metadata_config.primary_creator_country = 'USA';
    mgr.configuration.science_metadata_config.primary_creator_email = 'blanchette@msi.ucsb.edu';
    mgr.configuration.science_metadata_config.language = 'English';
    mgr.configuration.science_metadata_config.abstract = ...
        ['This metadata record describes moored seawater ' ...
         'temperature data collected at Jalama Beach ' ...
         'Campground, California, USA, by PISCO.  ' ...
         'Measurements were collected using StowAway ' ...
         'Tidbit Temperature Loggers (Onset Computer ' ...
         'Corp. TBIC32+4+27) beginning 2000-05-23.  ' ...
         'The instrument depth was 003 meters, in an ' ...
         'overall water depth of 015 meters (both ' ...
         'relative to Mean Sea Level, MSL).  ' ...
         'The sampling interval was 2.0 minutes. ']; ...
    mgr.configuration.science_metadata_config.keyword1 = 'intertidal';
    mgr.configuration.science_metadata_config.keyword2 = 'temperature';
    mgr.configuration.science_metadata_config.keyword3 = 'Santa Cruz Island';
    mgr.configuration.science_metadata_config.keyword4 = 'California';
    mgr.configuration.science_metadata_config.keyword5 = 'global';
    mgr.configuration.science_metadata_config.intellectual_rights = ...
        ['Please cite PISCO in all publications containing these data.   ' ...
        'The citation should take the form: "This study utilized data    ' ...
        'collected by the Partnership for Interdisciplinary Studies of   ' ...
        'Coastal Oceans: a long-term ecological consortium funded by the ' ...
        'David and Lucile Packard Foundation and the Gordon and Betty    ' ...
        'Moore Foundation."'];
    mgr.configuration.saveConfig();
      

Publishing an execution
~~~~~~~~~~~~~~~~~~~~~~~
With the metadata populated, you may choose to publish a run and its artifacts to a DataONE Member Node.  To do so, use the *RunManagerpublish()* function.  First, set the appropriate Member Node and Coordinating Node configuration properties, along with authentication properties.

.. code:: matlab

  mgr.configuration.target_member_node_id = 'urn:node:KNB'); % Or another repository
  mgr.configuration.coordinating_node_base_url = 'https://cn.dataone.org/cn');
  mgr.configuration.authentication_token = 'eyJhbGciOiJSUzI1Ni ...'); % Add your token here
  mgr.configuration.saveConfig();
  mgr.publish('86ac27de-f45c-4bc2-ba09-d4bedcec9546'); % Replace the packageId here

To obtain an authentication token above, visit http://search.dataone.org and use the *Sign In* button to log in with your account from your institution'.  You can also log in via a Google account.

Once signed in, navigate to the 'My profile' section of your account.  Choose the 'Settings' tab, and choose the 'Apps' section.  You'll see an authentication token in a dialog box.  Use the 'Copy' button to copy it to your clipboard, and paste it into the above command.  The token expires after 18 hours, so just return to your profile to renew it when needed.

The uploaded package can be viewed at https://search.dataone.org.